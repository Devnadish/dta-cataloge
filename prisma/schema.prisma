generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ====================
// AUTHENTICATION MODELS
// ====================

/// Represents an OAuth account linked to a user.
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String   @default("oauth")
  provider          String   @default("google")
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  /// Relationship to the User model
  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

/// Represents a user session.
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  /// Relationship to the User model
  user User @relation(fields: [userId], references: [id])
}

/// Represents a verification token for email verification.
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ====================
// USER ROLES AND RELATIONSHIPS
// ====================

/// Represents a system user (either an owner or a client).
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @default("Unknown User")
  email         String?   @unique
  emailVerified DateTime? @default(now())
  image         String?   @default("https://via.placeholder.com/150")
  role          UserRole  @default(client)

  /// Relationships
  accounts      Account[]
  sessions      Session[]
  client        Client?   @relation(name: "ClientToUser")
  owner         Owner?    @relation(name: "OwnerToUser")
}

enum UserRole {
  owner
  client
}

// ====================
// OWNER-SPECIFIC MODELS
// ====================

/// Represents a business owner who manages galleries.
model Owner {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  contactInfo String?   @default("")
  socialMedia Json?     @default("{}")
  message     String?   @default("")
  userId      String    @unique @db.ObjectId

  /// Relationships
  user      User?     @relation(fields: [userId], references: [id], name: "OwnerToUser")
  galleries Gallery[] @relation("OwnerToGallery")
}

/// Represents a gallery created by an owner.
model Gallery {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String   @default("Untitled Gallery")
  description      String   @default("Untitled Gallery")
  cloudinaryFolder String   @default("default-folder") // Default Cloudinary folder
  folder           String?  // Specific folder for this gallery (optional)
  ownerId          String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  /// Relationships
  owner Owner? @relation(fields: [ownerId], references: [id], name: "OwnerToGallery")
  items Item[] @relation("GalleryToItems")
}

// ====================
// CLIENT-SPECIFIC MODELS
// ====================

/// Represents a client who interacts with galleries.
model Client {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @unique @db.ObjectId

  /// Relationships
  user      User?     @relation(fields: [userId], references: [id], name: "ClientToUser")
  comments  Comment[]
  reactions Reaction[]
  shares    Share[]
}

// ====================
// GALLERY CONTENT MODELS
// ====================

/// Represents an item in a gallery (e.g., image or video).
model Item {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String    @default("Untitled Item")
  mediaUrl  String    @default("https://via.placeholder.com/150")
  galleryId String    @db.ObjectId

  /// Relationships
  gallery   Gallery   @relation(fields: [galleryId], references: [id], name: "GalleryToItems")
  comments  Comment[]
  reactions Reaction[]
  shares    Share[]
}

/// Represents a comment made by a client on an item.
model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  text     String    @default("Default comment text")
  itemId   String    @db.ObjectId
  clientId String    @db.ObjectId

  /// Relationships
  item   Item    @relation(fields: [itemId], references: [id])
  client Client  @relation(fields: [clientId], references: [id])
}

/// Represents a reaction (emoji) made by a client on an item.
model Reaction {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  emoji    String    @default("üëç")
  itemId   String    @db.ObjectId
  clientId String    @db.ObjectId

  /// Relationships
  item   Item    @relation(fields: [itemId], references: [id])
  client Client  @relation(fields: [clientId], references: [id])

  @@unique([itemId, clientId, emoji])
}

/// Represents a share action performed by a client on an item.
model Share {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  itemId    String    @db.ObjectId
  clientId  String    @db.ObjectId
  shareType ShareType @default(public)
  shareLink String?   @default("https://example.com/share")

  /// Relationships
  item   Item    @relation(fields: [itemId], references: [id])
  client Client  @relation(fields: [clientId], references: [id])
}

enum ShareType {
  private
  public
  invite
}