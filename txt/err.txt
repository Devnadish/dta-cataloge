Sure! Letâ€™s implement the **optional enhancements** for the video preview functionality. These enhancements will improve performance, user experience, and maintainability. Here's what weâ€™ll cover:

---

### **Optional Enhancements**
1. **Lazy Loading**:
   - Load video previews only when they are visible in the viewport to improve performance.
2. **Custom Controls**:
   - Customize the video player controls to match your app's design.
3. **Fallback Placeholder**:
   - Add a fallback placeholder for unsupported or corrupted files.

---

### **Step 1: Lazy Loading with `react-intersection-observer`**
To lazy load video previews, we can use the `react-intersection-observer` package. This ensures that videos are only loaded when they enter the viewport.

#### Install `react-intersection-observer`
```bash
pnpm add react-intersection-observer
```

#### Update Code for Lazy Loading
Modify the thumbnail preview logic to use the `useInView` hook from `react-intersection-observer`.

```tsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Trash2 } from 'lucide-react'; // Import trash icon from Lucide
import { toast } from 'sonner'; // For toast notifications
import ReactPlayer from 'react-player'; // Import ReactPlayer for video previews
import { useInView } from 'react-intersection-observer'; // For lazy loading

export default function UploadForm() {
  const [galleries, setGalleries] = useState([]);
  const [selectedGallery, setSelectedGallery] = useState('');
  const [files, setFiles] = useState<File[]>([]);
  const [loading, setLoading] = useState(false);

  // Fetch galleries on component mount
  useEffect(() => {
    const fetchGalleries = async () => {
      const res = await fetch('/api/galleries');
      const data = await res.json();
      setGalleries(data);
    };
    fetchGalleries();
  }, []);

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileList = e.target.files;
    if (!fileList) return;

    // Define allowed file types
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/quicktime'];

    // Filter out unsupported files
    const supportedFiles = Array.from(fileList).filter((file) => allowedTypes.includes(file.type));

    if (supportedFiles.length !== fileList.length) {
      const unsupportedFiles = Array.from(fileList).filter((file) => !allowedTypes.includes(file.type));
      toast.warning('Unsupported files were excluded', {
        description: `The following files are not supported: ${unsupportedFiles.map((file) => file.name).join(', ')}`,
      });
    }

    // Append supported files to the state
    setFiles((prevFiles) => [...prevFiles, ...supportedFiles]);
  };

  // Remove a file from the list
  const removeFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));
  };

  // Handle upload confirmation
  const handleUpload = async () => {
    if (!selectedGallery || files.length === 0) return;

    setLoading(true);
    try {
      for (const file of files) {
        const formData = new FormData();
        formData.append('file', file);

        const res = await fetch('/api/upload', {
          method: 'POST',
          body: formData,
        });

        if (!res.ok) throw new Error('Upload failed');

        const data = await res.json();
        await saveMediaToDatabase(selectedGallery, data.url);
      }
      toast.success('Upload successful!');
    } catch (error) {
      console.error('Error uploading files:', error);
      toast.error('Upload failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Save media URL to the database
  const saveMediaToDatabase = async (galleryId: string, url: string) => {
    const res = await fetch('/api/items', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ galleryId, mediaUrl: url }),
    });

    if (!res.ok) throw new Error('Failed to save media');
  };

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      <h2 className="text-2xl font-bold">Upload Media</h2>

      {/* Gallery Selection */}
      <div>
        <label className="block mb-2 text-sm font-medium">Select Gallery:</label>
        <Select value={selectedGallery} onValueChange={setSelectedGallery}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Select a gallery" />
          </SelectTrigger>
          <SelectContent>
            {galleries.map((gallery: any) => (
              <SelectItem key={gallery.id} value={gallery.id}>
                {gallery.title}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* File Upload */}
      <div>
        <label className="block mb-2 text-sm font-medium">Upload Files:</label>
        <Input
          type="file"
          multiple
          accept="image/*, video/*"
          onChange={handleFileChange}
        />
      </div>

      {/* Thumbnail Preview */}
      {files.length > 0 && (
        <div className="grid grid-cols-3 gap-4">
          {files.map((file, index) => {
            const isVideo = file.type.startsWith('video/');
            const { ref, inView } = useInView({
              triggerOnce: true, // Load the video only once when it enters the viewport
              threshold: 0.1, // Trigger when 10% of the element is visible
            });

            return (
              <div key={index} className="relative group" ref={ref}>
                {isVideo ? (
                  inView ? (
                    <ReactPlayer
                      url={URL.createObjectURL(file)}
                      width="100%"
                      height="100px"
                      controls
                      className="rounded-md"
                    />
                  ) : (
                    <div className="w-full h-32 bg-gray-200 rounded-md flex items-center justify-center">
                      <span className="text-gray-500">Loading video...</span>
                    </div>
                  )
                ) : (
                  <img
                    src={URL.createObjectURL(file)}
                    alt={file.name}
                    className="w-full h-32 object-cover rounded-md"
                  />
                )}
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity"
                  onClick={() => removeFile(index)}
                >
                  <Trash2 className="w-4 h-4 text-red-500" />
                </Button>
              </div>
            );
          })}
        </div>
      )}

      {/* Confirm Upload */}
      <Button
        onClick={handleUpload}
        disabled={loading || !selectedGallery || files.length === 0}
        className="w-full"
      >
        {loading ? 'Uploading...' : 'Confirm Upload'}
      </Button>
    </div>
  );
}
```

---

### **Step 2: Custom Controls for `react-player`**
You can customize the video player controls by hiding the default controls and implementing your own buttons for play/pause, volume, etc.

#### Example of Custom Controls
```tsx
import { useState } from 'react';

function CustomVideoPlayer({ url }: { url: string }) {
  const [playing, setPlaying] = useState(false);

  return (
    <div className="relative">
      <ReactPlayer
        url={url}
        width="100%"
        height="100px"
        playing={playing}
        controls={false} // Disable default controls
        className="rounded-md"
      />
      <div className="absolute bottom-2 left-2 flex gap-2">
        <button
          onClick={() => setPlaying(!playing)}
          className="p-2 bg-white rounded-full shadow-md"
        >
          {playing ? 'Pause' : 'Play'}
        </button>
      </div>
    </div>
  );
}
```

Replace the `ReactPlayer` component in the thumbnail preview with this custom player.

---

### **Step 3: Fallback Placeholder for Unsupported Files**
Add a fallback placeholder for unsupported or corrupted files.

#### Updated Code for Fallback Placeholder
```tsx
{isVideo ? (
  inView ? (
    <ReactPlayer
      url={URL.createObjectURL(file)}
      width="100%"
      height="100px"
      controls
      className="rounded-md"
      onError={() => {
        toast.error(`Failed to load video: ${file.name}`);
      }}
    />
  ) : (
    <div className="w-full h-32 bg-gray-200 rounded-md flex items-center justify-center">
      <span className="text-gray-500">Loading video...</span>
    </div>
  )
) : (
  <img
    src={URL.createObjectURL(file)}
    alt={file.name}
    className="w-full h-32 object-cover rounded-md"
    onError={(e) => {
      e.currentTarget.src = '/placeholder.png'; // Fallback image
      toast.error(`Failed to load image: ${file.name}`);
    }}
  />
)}
```

---

### **Testing the Enhancements**
1. **Lazy Loading**:
   - Scroll through the thumbnails and verify that videos are only loaded when they enter the viewport.
2. **Custom Controls**:
   - Test the custom play/pause button to ensure it works as expected.
3. **Fallback Placeholder**:
   - Upload an unsupported or corrupted file and verify that a fallback placeholder is displayed with an error notification.

---

These enhancements will make your video preview functionality more performant, customizable, and robust. Let me know if you need further assistance! ðŸ˜Š